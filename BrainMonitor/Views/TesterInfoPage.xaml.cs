using System.Windows;
using System.Windows.Controls;
using System.Threading.Tasks;
using BrainMirror.Services;

namespace BrainMirror.Views
{
    public partial class TesterInfoPage : UserControl
    {
        public TesterInfoPage()
        {
            InitializeComponent();
        }

        private async void ConfirmButton_Click(object sender, RoutedEventArgs e)
        {
            // 立即禁用按钮，防止重复点击
            ConfirmButton.IsEnabled = false;
            ConfirmButton.Content = "创建中...";

            try
            {
                // 验证输入
                if (string.IsNullOrWhiteSpace(NameTextBox.Text))
                {
                    ModernMessageBoxWindow.Show("请输入姓名", "提示", ModernMessageBoxWindow.MessageBoxType.Warning);
                    return;
                }

                if (string.IsNullOrWhiteSpace(PhoneTextBox.Text))
                {
                    ModernMessageBoxWindow.Show("请输入手机号", "提示", ModernMessageBoxWindow.MessageBoxType.Warning);
                    return;
                }

                if (GenderComboBox.SelectedItem == null)
                {
                    ModernMessageBoxWindow.Show("请选择性别", "提示", ModernMessageBoxWindow.MessageBoxType.Warning);
                    return;
                }

                if (string.IsNullOrWhiteSpace(AgeTextBox.Text))
                {
                    ModernMessageBoxWindow.Show("请输入年龄", "提示", ModernMessageBoxWindow.MessageBoxType.Warning);
                    return;
                }

                if (PrivacyCheckBox.IsChecked != true)
                {
                    ModernMessageBoxWindow.Show("请同意数据隐私协议", "提示", ModernMessageBoxWindow.MessageBoxType.Warning);
                    return;
                }

                // 检查是否已登录工作人员和机构
                if (GlobalMedicalStaffManager.CurrentLoggedInStaff == null)
                {
                    ModernMessageBoxWindow.Show("请先登录工作人员账号", "提示", ModernMessageBoxWindow.MessageBoxType.Warning);
                    return;
                }

                if (GlobalInstitutionManager.CurrentInstitutionDbId <= 0)
                {
                    ModernMessageBoxWindow.Show("请先登录机构", "提示", ModernMessageBoxWindow.MessageBoxType.Warning);
                    return;
                }

                // 获取性别选择
                var selectedGender = (GenderComboBox.SelectedItem as ComboBoxItem)?.Content.ToString() ?? "";

                // 检查手机号是否在同一工作人员下已存在
                try
                {
                    var existingTesters = await TesterService.GetAllTestersAsync(
                        GlobalMedicalStaffManager.CurrentLoggedInStaff.Id,
                        GlobalInstitutionManager.CurrentInstitutionDbId
                    );

                    if (existingTesters != null)
                    {
                        var phoneExists = existingTesters.Any(t => t.Phone == PhoneTextBox.Text.Trim());
                        if (phoneExists)
                        {
                            ModernMessageBoxWindow.Show("该手机号在当前工作人员下已存在，请使用其他手机号", "提示", ModernMessageBoxWindow.MessageBoxType.Warning);
                            return;
                        }
                    }
                }
                catch (Exception ex)
                {
                    ModernMessageBoxWindow.Show($"检查手机号时出错: {ex.Message}", "错误", ModernMessageBoxWindow.MessageBoxType.Error);
                    return;
                }

                // 自动生成测试者ID
                string autoGeneratedId = await GenerateTesterIdAsync();
                
                // 创建新的测试者信息
                var newTester = new Tester
                {
                    ID = autoGeneratedId,
                    Name = NameTextBox.Text.Trim(),
                    Age = AgeTextBox.Text,
                    Gender = selectedGender,
                    Phone = PhoneTextBox.Text
                };

                // 调用后端API创建测试者
                var createdTester = await TesterService.CreateTesterAsync(
                    newTester, 
                    GlobalMedicalStaffManager.CurrentLoggedInStaff.Id, 
                    GlobalInstitutionManager.CurrentInstitutionDbId
                );

                if (createdTester != null)
                {
                    // 创建成功，直接返回到工作人员操作页面，并设置需要刷新的标志
                    var medicalStaffPage = new MedicalStaffPage();
                    medicalStaffPage.SetRefreshFlag(true);
                    NavigationManager.NavigateTo(medicalStaffPage);
                }
                else
                {
                    ModernMessageBoxWindow.Show("测试者创建失败，请重试", "错误", ModernMessageBoxWindow.MessageBoxType.Error);
                }
            }
            catch (System.Exception ex)
            {
                ModernMessageBoxWindow.Show($"创建测试者失败: {ex.Message}", "错误", ModernMessageBoxWindow.MessageBoxType.Error);
            }
            finally
            {
                // 恢复按钮状态
                ConfirmButton.IsEnabled = true;
                ConfirmButton.Content = "确认";
            }
        }

        private void ReturnButton_Click(object sender, RoutedEventArgs e)
        {
            // 返回到工作人员操作页面
            NavigationManager.NavigateTo(new MedicalStaffPage());
        }

        /// <summary>
        /// 自动生成测试者ID
        /// </summary>
        /// <returns>生成的测试者ID</returns>
        private async Task<string> GenerateTesterIdAsync()
        {
            try
            {
                // 获取当前工作人员的测试者列表
                var testers = await TesterService.GetAllTestersAsync(
                    GlobalMedicalStaffManager.CurrentLoggedInStaff.Id,
                    GlobalInstitutionManager.CurrentInstitutionDbId
                );

                if (testers == null || testers.Count == 0)
                {
                    // 如果没有测试者，从001开始
                    return "001";
                }

                // 找到最大的ID号
                int maxId = 0;
                foreach (var tester in testers)
                {
                    if (int.TryParse(tester.TesterId, out int id))
                    {
                        if (id > maxId)
                        {
                            maxId = id;
                        }
                    }
                }

                // 生成下一个ID
                int nextId = maxId + 1;
                return nextId.ToString("D3"); // 格式化为3位数字，如001, 002等
            }
            catch
            {
                // 如果出错，使用时间戳作为备选方案
                return DateTime.Now.ToString("yyyyMMddHHmmss");
            }
        }
    }
}